package telegram_updates_check

import (
	"context"
	"fmt"
	"math/rand"
	"os"
	"strings"
	"time"
	"twitch_telegram_bot/internal/models"

	twitch_client "twitch_telegram_bot/internal/client/twitch-client"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/sirupsen/logrus"
)

const (
	telegramUpdatesCheckBGSync = "telegramUpdatesCheck_BGSync"
	pingCommand                = "/ping"
	jokeCommand                = "/anec"
	twitchUserCommand          = "/twitch_user"
)

type TelegramUpdatesCheckService struct {
	twitchClient *twitch_client.TwitchClient
}

func NewTelegramUpdatesCheckService(twitchClient *twitch_client.TwitchClient) (*TelegramUpdatesCheckService, error) {
	return &TelegramUpdatesCheckService{
		twitchClient: twitchClient,
	}, nil
}

func (tmcs *TelegramUpdatesCheckService) Sync(ctx context.Context) error {

	bot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_API_TOKEN"))
	if err != nil {
		return err
	}

	// –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ª–æ–≥–æ–≤
	bot.Debug = true

	logrus.Printf("Authorized on account %s", bot.Self.UserName)

	reader := tgbotapi.NewUpdate(0)
	reader.Timeout = 60

	updates := bot.GetUpdatesChan(reader)

	for updateInfo := range updates {
		if updateInfo.Message != nil {
			logrus.Printf("[%s] %s", updateInfo.Message.From.UserName, updateInfo.Message.Text)

			timeAndZone := time.Unix(int64(updateInfo.Message.Date), 0)

			msg := tgbotapi.NewMessage(updateInfo.Message.Chat.ID, "")

			timeNow := time.Now()
			// TODO: –ø–æ–¥—É–º–∞—Ç—å, –∫–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
			if timeAndZone.Add(time.Second * 12).Before(timeNow) {

				msg.Text = "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, —è –Ω–µ–º–Ω–æ–≥–æ –≤–∑–¥—Ä–µ–º–Ω—É–ª ‚ò∫Ô∏è . –¢–µ–ø–µ—Ä—å —è –ø—Ä–æ–±—É–¥–∏–ª—Å—è –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üòé "
				msg.ReplyToMessageID = updateInfo.Message.MessageID

				bot.Send(msg)

				logrus.Printf("skip reason: old time. User %s, message time %s, time now %s", updateInfo.Message.From.UserName, timeAndZone, timeNow)
				continue
			}

			// TODO: –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é

			// TODO: —Ä–∞—Å—à–∏—Ä—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
			switch {
			case strings.HasPrefix(updateInfo.Message.Text, pingCommand):
				msg.Text = "pong"
				msg.ReplyToMessageID = updateInfo.Message.MessageID

			case strings.HasPrefix(updateInfo.Message.Text, jokeCommand):
				rand.Seed(time.Now().UnixNano())
				msg.Text = models.JokeList[rand.Intn(len(models.JokeList))]

			// TODO: —É–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
			case strings.HasPrefix(updateInfo.Message.Text, twitchUserCommand):
				userLogin := updateInfo.Message.Text[len(fmt.Sprintf("%s ", twitchUserCommand)):]
				users, err := tmcs.twitchClient.GetUserInfo(ctx, os.Getenv("TWITCH_BEARER"), []string{userLogin})
				if err != nil {
					msg.Text = "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–µ–º—É –∞–≤—Ç–æ—Ä—É"
					msg.ReplyToMessageID = updateInfo.Message.MessageID
					break
				}

				user := users.Data[0]
				accCreatedTime := user.CreatedAt

				// –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ –ú–°–ö
				location := time.FixedZone("MSK", 3*60*60)
				accCreatedTime = accCreatedTime.In(location)

				var userType string
				switch user.Type {
				case "staff":
					userType = "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ç–≤–∏—á–∞"
					break
				case "admin":
					userType = "–∞–¥–º–∏–Ω —Ç–≤–∏—á–∞"
					break
				case "global_mod":
					userType = "–≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
					break
				default:
					userType = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
				}

				var userBroadcasterType string
				switch user.BroadcasterType {
				case "partner":
					userBroadcasterType = "–ø–∞—Ä—Ç–Ω–µ—Ä"
					break
				case "affiliate":
					userBroadcasterType = "–∫–æ–º–ø–∞–Ω—å–æ–Ω"
					break
				default:
					userBroadcasterType = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
				}

				// TODO: –ø–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
				msg.Text = fmt.Sprintf(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s
				–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: %s
				–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s
				–¢–∏–ø —Å—Ç—Ä–∏–º–µ—Ä–∞: %s
				%s
				`,
					user.DisplayName,
					accCreatedTime.Format("2006.02.01 15:04:05"),
					userType,
					userBroadcasterType,
					fmt.Sprintf("https://www.twitch.tv/%s", user.Login))

				msg.ReplyToMessageID = updateInfo.Message.MessageID
			}

			bot.Send(msg)
		}
	}

	return nil
}

func (tmcs *TelegramUpdatesCheckService) SyncBg(ctx context.Context, syncInterval time.Duration) {
	ticker := time.NewTicker(syncInterval)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			logrus.Infof("stoping bg %s process", telegramUpdatesCheckBGSync)
			return
		case <-ticker.C:
			logrus.Infof("started bg %s process", telegramUpdatesCheckBGSync)
			err := tmcs.Sync(ctx)
			if err != nil {
				logrus.Info("could not check telegram updates")
				continue
			}
			logrus.Info("telegram updates check was complited")
		}
	}

}
